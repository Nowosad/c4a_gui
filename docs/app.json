[{"name":"app.R","content":"library(shinyjs)\nlibrary(kableExtra)\nlibrary(colorblindcheck)\nlibrary(plotly)\nlibrary(cols4all)\n.C4A = cols4all:::.C4A\n\ntype = \"cat\"\nn = NA\nseries = \"all\"\n\nani_off = shiny::icon(\"circle-xmark\", \"fa-2x fa-solid\", verify_fa = FALSE)\nani_on = shiny::icon(\"circle-info\", \"fa-2x fa-light\", verify_fa = FALSE)\n\nif (!cols4all:::check_installed_packages(c(\"shiny\", \"shinyjs\", \"kableExtra\", \"colorblindcheck\", \"plotly\"))) return(invisible(NULL))\n\n\nshiny::addResourcePath(prefix = \"imgResources\", directoryPath = system.file(\"img\", package = \"cols4all\"))\n\n#############################\n## Catelogue tab\n#############################\n\nz = .C4A$z\n\nif (is.null(z)) stop(\"No palette data found. Either load data (cols4all:::c4a_data) or reload cols4all\")\n\nz = z[order(z$fullname), ]\n\ntps = unname(.C4A$types)\n\ntab_nmin = tapply(z$nmin, INDEX = list(z$series, factor(z$type, levels = tps)), FUN = min)\ntab_nmax = tapply(z$nmax, INDEX = list(z$series, factor(z$type, levels = tps)), FUN = max)\ntab_k = cols4all:::c4a_overview(zero.count.as.NA = TRUE)\n\n\nallseries = sort(unique(z$series))\nif (series[1] == \"all\") {\n  series = allseries\n} else {\n  if (!all(series %in% allseries)) message(\"These series do not exist: \\\"\", paste(setdiff(series, allseries), collapse = \"\\\", \\\"\"), \"\\\"\")\n  series = intersect(series, allseries)\n}\nif (!length(series)) {\n  message(\"No palette series to show. Either restart cols4all:::c4a_gui with different parameters, add palette data with cols4all:::c4a_load or cols4all:::c4a_sysdata_import\")\n  return(invisible(NULL))\n}\n\ntypes_available = names(which(apply(tab_nmin, MARGIN = 2, function(x)any(!is.na(x)))))\n\nstopifnot(length(types_available) > 0L)\nif (!(type %in% types_available)) {\n  warning(\"type \\\"\", type, \"\\\" is not available/known\")\n  type = types_available[1]\n}\n\n\nns = cols4all:::def_n(npref = n, type, series, tab_nmin, tab_nmax)\n\ntypes = .C4A$types\n\ntypes1 = .C4A$types1\ntypes2 = .C4A$types2\n\nif (nchar(type) == 3) {\n  type1 = type\n  type2 = if (type %in% names(types2)) unname(types2[[type]][1]) else \"\"\n} else {\n  type2 = type\n  type1 = substr(type, 1, 3)\n}\ntype12 = paste0(type1, type2)\n\ninit_pal_list = z$fullname[z$type == type12]\n\n\n#############################\n## Contrast tab\n#############################\n\npalette = z$fullname[1]\n\nx = cols4all:::c4a_info(palette)\n\nn_init = x$ndef\npal_init = unique(c(cols4all:::c4a(palette, n = n_init), \"#ffffff\", \"#000000\"))\n\n\ngetNames = function(p) {\n  lapply(p, function(pi) {\n    shiny::HTML(paste0(\"<div style='font-size:2em;line-height:0.5em;height:0.5em;color:\", pi, \"'>&#9632;<\/div>\"))\n  })\n}\n\n\n\n.C4A_HASH = new.env(FALSE, parent=environment())\n.C4A_HASH$vals = list()\n.C4A_HASH$tables = list()\n\ninfoBoxUI = function(inp = NULL, title) {\n  if (is.null(inp)) {\n    # padding to compensate for button\n    shiny::div(style=\"display: inline-block; padding: 5px;\", cols4all:::h4title(title, inline = TRUE))\n  } else {\n    shiny::div(style=\"display: inline-block\", cols4all:::h4title(title, inline = TRUE), shiny::actionButton(inp, \"\", ani_on, style = \"border: none;\"))\n  }\n}\nplotOverlay = function(outputId, width, height, id, click = NULL) {\n  shiny::div(style = paste0(\"position: relative; width: \", width, \"; height: \", height, \";\"),\n             shiny::plotOutput(outputId = outputId, width = width, height = height, click = click),\n             shiny::img(id = id, class = \"hide\", src = \"\", style = \"pointer-events: none; position: absolute; left: 0px; right: 0px\"))\n}\n\nui = shiny::fluidPage(\n  shinyjs::useShinyjs(),\n  shiny::tags$script(src = \"https://kit.fontawesome.com/f175d6d133.js\"),\n  shiny::tags$head(shiny::includeCSS(system.file(\"www/light.css\", package = \"cols4all\"))),\n  shiny::tags$head(shiny::includeCSS(system.file(\"www/dark.css\", package = \"cols4all\"))),\n  shiny::tags$head(shiny::includeCSS(system.file(\"www/misc.css\", package = \"cols4all\"))),\n  shiny::absolutePanel(\n    top = 25,\n    right = 40,\n    width = 90,\n    shiny::checkboxInput(\"dark\", \"Dark mode\", value = FALSE)),\n  # shiny::absolutePanel(\n  # \ttop = 10,\n  # \tright = 10,\n  # \twidth = 20,\n  # \tshiny::actionButton(\"info\", \"\", shiny::icon(\"info\"),\n  # \t\t\t\t\t\tstyle=\"color: #fff; background-color: #337ab7; border-color: #2e6da4\")\n  # ),\n  shiny::tabsetPanel(\n    id=\"inTabset\",\n    shiny::tabPanel(\"Overview\",\n                    value = \"tab_catel\",\n                    shiny::fluidRow(\n                      shiny::column(width = 3,\n                                    shiny::img(src = \"imgResources/cols4all_logo.png\", height=\"200\", align = \"center\", 'vertical-align' = \"center\")),\n                      shiny::column(width = 3,\n                                    shiny::radioButtons(\"type1\", \"Palette type\", choices = types1, selected = type1),\n                                    shiny::conditionalPanel(\n                                      condition = \"input.type1 == 'biv'\",\n                                      shiny::selectizeInput(\"type2\", \"Subtype\", choices = types2[[\"biv\"]], selected = type2)),\n                                    shiny::conditionalPanel(\n                                      condition = \"input.type1 != 'biv'\",\n                                      shiny::sliderInput(\"n\", \"Number of colors\", min = ns$nmin, max = ns$nmax, value = ns$n, ticks = FALSE)),\n                                    shiny::conditionalPanel(\n                                      condition = \"input.type1 == 'seq' || input.type1 == 'div' || input.type1 == 'cyc'\",\n                                      shiny::checkboxInput(\"continuous\", \"Show as continuous palette\", value = FALSE)\n                                    ),\n                                    shiny::conditionalPanel(\n                                      condition = \"input.type1 == 'biv'\",\n                                      shiny::fluidRow(\n                                        shiny::column(6,\n                                                      shiny::uiOutput(\"nbivUI\")),\n                                        shiny::column(6,\n                                                      shinyjs::disabled(shiny::sliderInput(\"mbiv\", \"Number of rows\", min = 3, max = 7, value = 3, ticks = FALSE))))),\n                                    shiny::checkboxInput(\"na\", \"Color for missing values\", value = FALSE),\n                                    shiny::uiOutput(\"sortcolorUI\"),\n                                    shiny::conditionalPanel(\n                                      condition = \"input.type1 == 'seq' || input.type1 == 'div'\",\n                                      shiny::fluidRow(\n                                        shiny::column(4,\n                                                      #shiny::br(),\n                                                      shiny::radioButtons(\"auto_range\", label = \"Range\", choices = c(\"Automatic\", \"Manual\"), selected = \"Automatic\")),\n                                        shiny::conditionalPanel(\n                                          condition = \"input.auto_range == 'Manual'\",\n                                          shiny::column(8,\n                                                        shiny::div(style = \"font-size:0;margin-bottom:-10px\", shiny::sliderInput(\"range\", \"\", min = 0, max = 1, value = c(0,1), step = .05)),\n                                                        shiny::uiOutput(\"range_info\"))\n                                        )\n                                      ))\n                      ),\n                      \n                      shiny::column(width = 3,\n                                    shiny::selectizeInput(\"sort\", \"Sort palettes\", choices = structure(c(\"name\", \"rank\"), names = c(\"Name\", .C4A$labels[\"cbfriendly\"])), selected = \"name\"),\n                                    shiny::div(style = \"margin-top: 5px;\", shiny::checkboxInput(\"sortRev\", \"Reverse sorting\", value = FALSE)),\n                                    #shiny::div(style = \"margin-bottom: 5px;\", shiny::strong(\"Select\")),\n                                    shiny::div(class = \"control-label2\", \"Filter\"),\n                                    shiny::uiOutput(\"filtersUI\"),\n                                    \n                                    shiny::div(class = \"control-label2\", \"Palette series\"),\n                                    \n                                    shiny::div(class = 'multicol',\n                                               shiny::checkboxGroupInput(\"series\", label = \"\", choices = allseries, selected = series, inline = FALSE)),\n                                    shiny::fluidRow(\n                                      shiny::column(12, align=\"right\",\n                                                    shiny::actionButton(\"all\", label = \"All\"),\n                                                    shiny::actionButton(\"none\", label = \"None\"),\n                                                    shiny::actionButton(\"overview\", label = \"Overview\")))\n                                    \n                                    \n                                    #shiny::\n                      ),\n                      shiny::column(width = 3,\n                                    shiny::radioButtons(\"cvd\", \"Color vision\", choices = c(Normal = \"none\", 'Deutan (red-green blind)' = \"deutan\", 'Protan (also red-green blind)' = \"protan\", 'Tritan (blue-yellow)' = \"tritan\"), selected = \"none\"),\n                                    shiny::radioButtons(\"textformat\", \"Text\", choices = c(\"None\" = \"none\", \"Hex\" = \"hex\", \"RGB\" = \"RGB\", \"HCL\" = \"HCL\"), inline = T),\n                                    shiny::div(class = \"control-label3\", \"Underlying scores\"),\n                                    shiny::div(style = \"margin-top: 5px;\", shiny::checkboxInput(\"advanced\", \"Show scores\", value = FALSE))\n                      ),\n                      \n                    ),\n                    \n                    shiny::fluidRow(\n                      shiny::column(\n                        width = 12,\n                        shiny::tableOutput(\"show\"))\n                    )\n    ),\n    shiny::tabPanel(\"Color Blind Friendliness\",\n                    value = \"tab_cvd\",\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::selectizeInput(\"cbfPal\", \"Palette\", choices = init_pal_list),\n                                    shiny::br(),\n                                    shiny::br(),\n                                    infoBoxUI(\"infoSimu\", \"Color blindness simulation\"),\n                                    plotOverlay(\"cbfSimu\", width = \"800px\", height = \"150px\", \"aniSimu\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 4,\n                                    shiny::br(),\n                                    shiny::br(),\n                                    infoBoxUI(\"infoHueLines\", \"Hue lines\")),\n                      \n                      \n                      \n                      #### **Hue lines**\")),\n                      shiny::column(width = 6,\n                                    shiny::br(),\n                                    shiny::br(),\n                                    infoBoxUI(\"infoSimi\", \"Similarity matrix\"))),\n                    shiny::fluidRow(shiny::column(width = 4, shiny::markdown(\"Normal color vision\")),\n                                    shiny::column(width = 3, shiny::radioButtons(\"cbfScore\", NULL, choices = c(\"Symbols\", \"Gradient\"), inline = TRUE)),\n                                    shiny::column(width = 3, shiny::checkboxInput(\"cbfBcAdj\", \"Background Adjustment\", value = FALSE)),\n                                    shiny::column(width = 2, shiny::radioButtons(\"cbfType\", NULL, choices = c(\"Map\", \"Lines\"), inline = TRUE))),\n                    shiny::fluidRow(shiny::column(width = 4, plotOverlay(\"cbfHL\", width = \"375px\", height = \"375px\", \"aniHL\")),\n                                    shiny::column(width = 6, plotOverlay(\"cbfSimi\", width = \"500px\", height = \"375px\", \"aniSimi\", click = \"cbfSimi_click\")),\n                                    shiny::column(width = 2, shiny::plotOutput(\"cbf_ex1\", height = \"375px\", width = \"150px\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 4,\n                                    shiny::br(),\n                                    shiny::br(),\n                                    infoBoxUI(\"infoConf\", \"Confusion lines\")),\n                      shiny::column(width = 6,\n                                    shiny::br(),\n                                    shiny::br(),\n                                    infoBoxUI(\"infoPSimi\", \"Perceived similarity matrices\"))),\n                    #shiny::column(width = 6, shiny::markdown(\"<br/><br/>\n                    #### **Distance matrices**\"))),\n                    shiny::fluidRow(shiny::column(width = 12, shiny::markdown(\"Deutan (red-green blind)\"))),\n                    shiny::fluidRow(shiny::column(width = 4, plotOverlay(\"cbfCL1\", width = \"375px\", height = \"375px\", \"aniCL1\")),\n                                    shiny::column(width = 6, plotOverlay(\"cbfPSimi1\", width = \"500px\", height = \"375px\", \"aniPSimi1\", click = \"cbfPSimi1_click\")),\n                                    shiny::column(width = 2, shiny::plotOutput(\"cbf_ex2\", height = \"375px\", width = \"150px\"))),\n                    shiny::fluidRow(shiny::column(width = 12, shiny::markdown(\"<br/><br/>Protan (also red-green blind)\"))),\n                    shiny::fluidRow(shiny::column(width = 4, plotOverlay(\"cbfCL2\", width = \"375px\", height = \"375px\", \"aniCL2\")),\n                                    shiny::column(width = 6, plotOverlay(\"cbfPSimi2\", width = \"500px\", height = \"375px\", \"aniPSimi2\", click = \"cbfPSimi2_click\")),\n                                    shiny::column(width = 2, shiny::plotOutput(\"cbf_ex3\", height = \"375px\", width = \"150px\"))),\n                    shiny::fluidRow(shiny::column(width = 12, shiny::markdown(\"<br/><br/>Tritan (blue-yellow)\"))),\n                    shiny::fluidRow(shiny::column(width = 4, plotOverlay(\"cbfCL3\", width = \"375px\", height = \"375px\", \"aniCL3\")),\n                                    shiny::column(width = 6, plotOverlay(\"cbfPSimi3\", width = \"500px\", height = \"375px\", \"aniPSimi3\", click = \"cbfPSimi3_click\")),\n                                    shiny::column(width = 2, shiny::plotOutput(\"cbf_ex4\", height = \"375px\", width = \"150px\")))),\n    shiny::tabPanel(\"HCL Analysis\",\n                    value = \"tab_cl\",\n                    \n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::selectizeInput(\"CLPal\", \"Palette\", choices = init_pal_list))),\n                    shiny::fluidRow(\n                      shiny::column(width = 4,\n                                    infoBoxUI(title = \"HCL space\"),\n                                    shiny::img(src = \"imgResources/hcl_spacex1.png\", srcset = \"imgResources/hcl_spacex1.png 1x, imgResources/hcl_spacex2.png 2x\"),\n                                    shiny::sliderInput(\"rangeH\", min = 0, max = 360, value = c(0, 360), step = 10, label = \"Hue\"),\n                                    shiny::sliderInput(\"rangeC\", min = 0, max = 180, value = c(0, 180), step = 10, label = \"Chroma\"),\n                                    shiny::sliderInput(\"rangeL\", min = 0, max = 100, value = c(0, 100), step = 10, label = \"Luminance\"),\n                                    shiny::checkboxInput(\"hclspacepal\", \"Palette colors\", FALSE)),\n                      shiny::column(width = 8,\n                                    plotly::plotlyOutput(\"hclspace\", height = \"600px\"))\n                    ),\n                    shiny::fluidRow(\n                      shiny::column(width = 6,\n                                    infoBoxUI(\"infoHUE\", \"Hue necklace\"),\n                                    plotOverlay(\"anaHUE\", width = \"400px\", height = \"400px\", \"aniHUE\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 6,\n                                    infoBoxUI(\"infoCL\", \"Chroma-Luminance\"),\n                                    plotOverlay(\"anaCL\", width = \"600px\", height = \"600px\", \"aniCL\")),\n                      shiny::column(width = 6,\n                                    infoBoxUI(\"infoFair\", \"Fairness\"),\n                                    plotOverlay(\"anaFair\", width = \"600px\", height = \"600px\", \"aniFair\")))),\n    \n    shiny::tabPanel(\"Contrast\",\n                    value = \"tab_cont\",\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::selectizeInput(\"contrastPal\", \"Palette\", choices = init_pal_list))),\n                    shiny::fluidRow(\n                      shiny::column(width = 6,\n                                    shiny::uiOutput(\"cr_title\"),\n                                    shiny::plotOutput(\"cr_plot\")),\n                      shiny::column(width = 6,\n                                    shiny::markdown(\"**Options**\"),\n                                    shiny::checkboxGroupInput(\"cr_plot_opts\", \"\", c(\"Sort\" = \"sort\", \"Show WCAG criteria\" = \"wcag\", \"Show equiluminant groups\" = \"equi\"), selected = \"\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 6,\n                                    infoBoxUI(\"infoCR\", \"Contrast ratios between colors\"),\n                                    plotOverlay(\"table\", width = \"400px\", height = \"300px\", \"aniTable\", click = \"table_click\")),\n                      shiny::column(width = 6,\n                                    shiny::markdown(\"<br><\/br>\n#### **Text readability**\n\"),\n                                    shiny::uiOutput(\"textCR\"),\n                                    shiny::plotOutput(\"textPlot\", height = \"200\", width = \"400\")\n                      )),\n                    \n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::markdown(\"<br/><br/>\n\t\t\t\t \t\t\t\t\t  #### **Border lines needed?**\n\t\t\t\t \t\t\t\t\t  \"),\n                                    shiny::uiOutput(\"bordersCR\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 3,\n                                    shiny::markdown(\"\"),\n                                    shiny::radioButtons(\"chart\", \"Example chart\", c(\"Choropleth\", \"Barchart\"), \"Choropleth\", inline = FALSE),\n                                    shiny::selectizeInput(\"borders\", \"Borders\", choices = c(\"black\", \"white\"), selected = \"black\"),\n                                    shiny::sliderInput(\"lwd\", \"\", min = 0, max = 3, step = 1, value = 0)),\n                      shiny::column(\n                        width = 9,\n                        shiny::plotOutput(\"ex\", height = \"300px\", width = \"600px\")\n                      )\n                      \n                    ),\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::markdown(\"**Optical Illusion Art**\"),\n                                    shiny::plotOutput(\"ex_plus\", height = \"703\", width = \"900\"),\n                                    shiny::markdown(\"<br/><br/>_Plus Reversed_ by Richard Anuszkiewicz (1960)\"),\n                                    shiny::checkboxInput(\"plus_rev_original\", \"Use optical illusion's original colors\", value = FALSE),\n                      )\n                    )\n                    \n    ),\n    shiny::tabPanel(\"3D Blues\",\n                    value = \"tab_floating\",\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::selectizeInput(\"floatPal\", \"Palette\", choices = init_pal_list))),\n                    \n                    shiny::fluidRow(\n                      shiny::column(width = 8,\n                                    infoBoxUI(\"infoBlues\", \"Chromostereopsis\"),\n                                    plotOverlay(\"blues\", width = \"550px\", height = \"550px\", \"aniBlues\"),\n                                    shiny::markdown(\"<br/><br/>[_Visual illusion by Michael Bach_](https://michaelbach.de/ot/col-chromostereopsis/)\"),\n                                    shiny::checkboxInput(\"float_original\", \"Use optical illusion's original colors\", value = FALSE),\n                                    shiny::checkboxInput(\"float_rev\", \"Reverse colors\", value = FALSE)),\n                      shiny::column(width = 4,\n                                    shiny::plotOutput(\"float_letters\", \"Float letter\", height = 80, width = 300),\n                                    shiny::uiOutput(\"float_selection\"),\n                                    shiny::plotOutput(\"float_letters_AB\", \"Float letter\", height = 150, width = 300)\n                      ))),\n    \n    shiny::tabPanel(\"Naming\",\n                    value = \"tab_name\",\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::selectizeInput(\"namePal\", \"Palette\", choices = init_pal_list),\n                                    infoBoxUI(\"infoName\", \"Naming table (in development)\"),\n                                    plotOverlay(\"anaName\", width = \"1000px\", height = \"600px\", \"aniName\"))),\n                    #shiny::plotOutput(\"namePlot\", height = \"600px\", width = \"1000px\"))),\n                    shiny::fluidRow(\n                      shiny::column(width = 12,\n                                    shiny::sliderInput(\"nameAlpha\", \"Clarity level\", min = .5, max = .C4A$naming_softmax$a + 2, step = .5, value = .C4A$naming_softmax$a))),\n                    #shiny::actionButton(\"showWeights\", \"Show weight calibration\"))),\n                    # shiny::conditionalPanel(\n                    # \tcondition = \"input.showWeights % 2 == 1\",\n                    # \tshiny::fluidRow(\n                    # \t\tshiny::column(width = 3,\n                    # \t\t\t\t  shiny::sliderInput(\"w_1\", \"Green\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[1])),\n                    # \t\t\t\t  shiny::sliderInput(\"w_2\", \"Blue\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[2])),\n                    # \t\t\t\t  shiny::sliderInput(\"w_3\", \"Purple\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[3])),\n                    # \t\t\t\t  shiny::sliderInput(\"w_4\", \"Pink\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[4]))\n                    # \t\t),\n                    # \t\tshiny::column(width = 3,\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_5\", \"Yellow\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[5])),\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_6\", \"Brown\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[6])),\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_7\", \"Orange\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[7])),\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_8\", \"Red\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[8]))\n                    # \t\t),\n                    # \t\tshiny::column(width = 3,\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_9\", \"White\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[9])),\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_10\", \"Gray\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[10])),\n                    # \t\t\t\t\t  shiny::sliderInput(\"w_11\", \"Black\", min = 0, max = 1.2, step = 0.01, value = unname(.C4A$boynton_weights[11])),\n                    # \t\t\t\t\t  shiny::actionButton(\"w_do\", \"Update naming data\")\n                    # \t\t)\n                    # \t)\n                    # )\n                    \n    ),\n    \n    \n    shiny::tabPanel(\"Application\",\n                    value = \"tab_app\",\n                    shiny::wellPanel(\n                      shiny::fluidRow(\n                        shiny::column(width = 4,\n                                      shiny::selectizeInput(\"APPPal\", \"Palette\", choices = init_pal_list)),\n                        shiny::column(width = 4,\n                                      shiny::selectizeInput(\"APPcvd\", \"Color vision deficinecy\", choices = c(Normal = \"none\", 'Deutan (red-green blind)' = \"deutan\", 'Protan (also red-green blind)' = \"protan\", 'Tritan (blue-yellow)' = \"tritan\"), selected = \"none\")))),\n                    \n                    cols4all:::h4title(\"Points\"),\n                    shiny::fluidRow(\n                      shiny::column(width = 8, shiny::plotOutput(\"DOTplot\", width = 800, height = 400)),\n                      shiny::column(width = 4,\n                                    shiny::radioButtons(\"DOTdist\", \"Color distribution\", choices = c(Random = \"random\", Concentric = \"concentric\"), selected = \"random\"),\n                                    shiny::sliderInput(\"DOTsize\", \"\", min = .5, max = 5, step = .5, value = 1),\n                                    shiny::selectizeInput(\"DOTborders\", \"Borders\", choices = c(\"black\", \"white\"), selected = \"black\"),\n                                    shiny::sliderInput(\"DOTlwd\", \"\", min = 0, max = 3, step = 1, value = 0))),\n                    cols4all:::h4title(\"Lines\"),\n                    shiny::fluidRow(\n                      shiny::column(width = 8, shiny::plotOutput(\"LINEplot\", width = 800, height = 400)),\n                      shiny::column(width = 4,\n                                    shiny::checkboxInput(\"LINEstack\", \"Stacked\", value = FALSE),\n                                    shiny::sliderInput(\"LINElwd\", \"Line width\", min = 1, max = 5, step = 1, value = 3))),\n                    \n                    cols4all:::h4title(\"Polygons\"),\n                    shiny::fluidRow(\n                      shiny::column(width = 8, shiny::plotOutput(\"MAPplot\", width = 800, height = 400)),\n                      shiny::column(width = 4, shiny::radioButtons(\"MAPdist\", \"Color distribution\", choices = c(Random = \"random\", Gradient = \"gradient\"), selected = \"random\"),\n                                    shiny::selectizeInput(\"MAPborders\", \"Borders\", choices = c(\"black\", \"white\"), selected = \"black\"),\n                                    shiny::sliderInput(\"MAPlwd\", \"\", min = 0, max = 3, step = 1, value = 1)\n                      )),\n                    cols4all:::h4title(\"Text\"),\n                    shiny::fluidRow(\n                      shiny::column(width = 8,\n                                    shiny::plotOutput(\"TXTplot1\", width = 800, height = 120),\n                                    shiny::plotOutput(\"TXTplot2\", \"Text\", width = 800, height = 120)),\n                      shiny::column(width = 4,\n                                    shiny::sliderInput(\"TXTfsize\", \"Font size\", min = 4, max = 72, step = 1, value = 12),\n                                    shiny::radioButtons(\"TXTfface\", \"Font face\", choices = c(Plain = \"plain\", Bold = \"bold\", Italic = \"italic\")))),\n                    \n    )\n  ),\n  shiny::tags$script(\n    shiny::HTML('\n      $(document).on(\"shiny:connected\", function() {\n        $(\"#showWeights\").on(\"click\", function() {\n          var currentLabel = $(this).text();\n          if (currentLabel === \"Show weight calibration\") {\n            $(this).text(\"Hide weight calibration\");\n          } else {\n            $(this).text(\"Show weight calibration\");\n          }\n        });\n      });\n    ')\n  ))\n\n\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n##############################################################                                             ######################################################################\n##############################################################           Server                            ######################################################################\n##############################################################                                             ######################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n#################################################################################################################################################################################\n\n\nserver = function(input, output, session) {\n  #############################\n  ## Catelogue tab\n  #############################\n  \n  series_d = shiny::debounce(shiny::reactive(input$series), 300)\n  \n  get_type12 = shiny::reactive({\n    type1 = input$type1\n    type12 = if (type1 %in% names(types2)) {\n      input$type2\n    } else {\n      type1\n    }\n  })\n  \n  anno = shiny::reactiveValues(simu = FALSE, hue_lines = FALSE, cvd = FALSE, simi = FALSE, psimi = FALSE, conf_lines = FALSE, hue_neck = FALSE, cl_plot = FALSE, fair_plot = FALSE, naming = FALSE, cr = FALSE, blues = FALSE)\n  \n  tab_vals = shiny::reactiveValues(pal = pal_init,\n                                   na = FALSE,\n                                   palBW = unique(c(pal_init, \"#FFFFFF\", \"#000000\")),\n                                   pal_name = palette,\n                                   n = n_init,\n                                   idA1 = 1L, idA2 = 2L,\n                                   idB1 = 1L, idB2 = 2L,\n                                   idC1 = 1L, idC2 = 2L,\n                                   CR = colorspace::contrast_ratio(pal_init[1], pal_init[2]),\n                                   type = type12,\n                                   cvd = \"none\",\n                                   b = cols4all:::approx_blues(pal_init),\n                                   r = cols4all:::approx_reds(pal_init))\n  \n  \n  \n  shiny::observeEvent(input$all, {\n    shiny::freezeReactiveValue(input, \"series\")\n    shiny::updateCheckboxGroupInput(session, \"series\", selected = allseries)\n  })\n  \n  shiny::observeEvent(input$none, {\n    shiny::freezeReactiveValue(input, \"series\")\n    shiny::updateCheckboxGroupInput(session, \"series\", selected = character())\n  })\n  \n  shiny::observeEvent(get_cols(), {\n    if (is.null(input$sort)) return(NULL)\n    cols = get_cols()\n    sort = shiny::isolate(input$sort)\n    shiny::freezeReactiveValue(input, \"sort\")\n    sortNew = if (sort %in% cols) sort else \"name\"\n    shiny::updateSelectizeInput(session, \"sort\", choices  = cols,selected = sortNew)\n  })\n  \n  shiny::observeEvent(input$dark, {\n    \n    if ( ! input$dark ) {\n      shinyjs::removeClass(selector = \"body\", class = \"dark\")\n    } else {\n      shinyjs::addClass(selector = \"body\", class = \"dark\")\n    }\n    \n  })\n  \n  \n  shiny::observeEvent(get_type12(), {\n    type = get_type12()\n    \n    if (!(type %in% types_available)) return(NULL)\n    if (is.null(input$n)) return(NULL)\n    \n    if (type %in% c(\"cat\", \"seq\", \"div\", \"cyc\")) {\n      series = series_d()\n      if (is.null(series)) return(NULL)\n      \n      ns =  cols4all:::def_n(npref = input$n, type, series, tab_nmin, tab_nmax)\n      shiny::freezeReactiveValue(input, \"n\")\n      shiny::updateSliderInput(session, \"n\", min = ns$nmin, max = ns$nmax, value = ns$n)\n    } else {\n      ndef = unname(.C4A$ndef[type])\n      \n      mdef = unname(.C4A$mdef[type])\n      if (is.na(mdef)) {\n        shinyjs::disable(\"mbiv\")\n      } else {\n        shinyjs::enable(\"mbiv\")\n      }\n      nmin = if (type == \"bivd\") 3 else 2\n      nstep = if (type == \"bivd\") 2 else 1\n      \n      if (is.na(mdef)) mdef = ndef\n      \n      if (is.infinite(ndef) || is.infinite(mdef)) return(NULL)\n      \n      shiny::freezeReactiveValue(input, \"nbiv\")\n      shiny::freezeReactiveValue(input, \"mbiv\")\n      shiny::updateSliderInput(session, \"nbiv\", value = ndef, min = nmin, step = nstep)\n      shiny::updateSliderInput(session, \"mbiv\", value = mdef, min = nmin, step = nstep)\n    }\n    # print(\"/+++++++++\")\n  })\n  \n  \n  shiny::observeEvent(series_d(), {\n    type = get_type12()\n    \n    if (!(type %in% c(\"cat\", \"seq\", \"div\", \"cyc\"))) return(NULL)\n    \n    series = series_d()\n    \n    if (is.null(series)) return(NULL)\n    ns =  cols4all:::def_n(npref = input$n, type, series, tab_nmin, tab_nmax)\n    # print(\"-------------\")\n    # print(ns)\n    if (is.null(ns)) return(NULL)\n    shiny::freezeReactiveValue(input, \"n\")\n    shiny::updateSliderInput(session, \"n\", min = ns$nmin, max = ns$nmax, value = ns$n)\n    # print(\"/-------------\")\n  })\n  \n  shiny::observeEvent(input$overview, {\n    type = get_type12()#rv$type12\n    title = paste0(\"Overview of palettes per series of type \", type)\n    shiny::showModal(shiny::modalDialog(title = \"Number of palettes per series (rows) and type (columns)\",\n                                        shiny::renderTable(tab_k, na = \"\", striped = TRUE, hover = TRUE, bordered = TRUE),\n                                        shiny::div(style=\"font-size: 75%;\", shiny::renderTable(.C4A$type_info)),\n                                        footer = shiny::modalButton(\"Close\"),\n                                        style = \"color: #000000;\",\n                                        size = \"l\"))\n  })\n  \n  output$nbivUI = shiny::renderUI({\n    type = get_type12()\n    shiny::sliderInput(\"nbiv\", \"Number of columns\", min = 2, max = ifelse(type == \"bivc\", 10, 7), value = 3, ticks = FALSE)\n  })\n  \n  output$filtersUI = shiny::renderUI({\n    type = get_type12()\n    filters = c(\"Only n = nmax (categorical only)\" = \"nmax\",\n                \"Colorblind-friendly\" = \"cbf\",\n                \"Fair\" = \"fair\",\n                \"Good contrast ratio with white\" = \"crW\",\n                \"Good contrast ratio with black\" = \"crB\",\n                \"Nameability\" = \"naming\")\n    \n    filters_type = if (type == \"cat\") {\n      filters\n    } else if (type %in% c(\"seq\", \"div\", \"cyc\", \"bivc\", \"bivs\", \"bivd\", \"bivg\")) {\n      filters[c(1, 2, 3, 4, 5)]\n    }\n    \n    \n    shiny::checkboxGroupInput(\"filters\", label = \"\", choices = filters_type, inline = FALSE)\n    \n  })\n  \n  \n  get_cols = shiny::reactive({\n    type = get_type12()\n    res = cols4all:::table_columns(type, input$advanced)\n    \n    \n    xl = c(res$ql, res$sl)\n    xn = c(res$qn, res$sn)\n    \n    anyD = duplicated(xl)\n    structure(c(\"name\", xn[!anyD]), names = c(\"Name\", xl[!anyD]))\n  })\n  \n  get_trigger = shiny::reactiveVal(FALSE)\n  \n  get_values = shiny::reactive({\n    if (input$sort == \"\") return(NULL)\n    type = get_type12()\n    n = input$n\n    if (is.null(n)) return(NULL)\n    lst = list(n = n,\n               continuous = input$continuous,\n               nbiv = input$nbiv,\n               mbiv = input$mbiv,\n               trigger = get_trigger(),\n               type = type,\n               cvd = input$cvd,\n               sort = input$sort,\n               sortRev = input$sortRev,\n               series = series_d(),\n               show.scores = input$advanced,\n               columns = if (n > 16) 12 else n,\n               na = input$na,\n               range = if (input$auto_range == \"Automatic\") NA else input$range,\n               #n.only = if (is.null(input$n.only) || type != \"cat\") FALSE else input$n.only,\n               filters = if (is.null(input$filters)) character(0) else input$filters,\n               #c(\"Hide text\" = \"same\", Black = \"#000000\", White = \"#FFFFFF\", Automatic = \"auto\")\n               textcol = if (input$textformat == \"none\") \"same\" else \"auto\",\n               format = if (input$textformat == \"none\") \"hex\" else input$textformat,\n               colorsort = if (is.null(input$sortcolor) || !(type %in% c(\"cat\", \"seq\"))) \"orig\" else if (input$sortcolor == \"H\") paste0(input$sortcolor, input$Hstart) else input$sortcolor)\n    \n    if (substr(type, 1, 3) == \"biv\") {\n      m = n\n    } else {\n      m = 1\n    }\n    \n    if (is.null(lst$series)) return(NULL)\n    \n    lst = within(lst, {\n      sort = paste0({if (sortRev) \"-\" else \"\"}, sort)\n      if (is.null(series)) {\n        prep = NULL\n        pal_names = NULL\n      } else {\n        if (substr(type, 1, 3) == \"biv\") {\n          prep = cols4all:::prep_table(type = type, n = nbiv, m = mbiv, sort = sort, series = series, range = range, colorsort = colorsort, show.scores = show.scores, columns = nbiv, verbose = FALSE, filters = filters)\n          \n        } else {\n          prep = cols4all:::prep_table(type = type, n = n, continuous = continuous, sort = sort, series = series, range = range, colorsort = colorsort, show.scores = show.scores, columns = columns, verbose = FALSE, filters = filters)\n        }\n        pal_names = prep$zn$fullname\n      }\n    })\n    #\n    #\n    # sel = z$type == type &\n    # \tz$series %in% lst$series &\n    # \tlst$n <= z$nmax\n    # if (!any(sel)) {\n    # \tlst$pal_names = character(0)\n    # } else {\n    # \tlst$pal_names = z$fullname[sel]#sort(z$fullname[sel])\n    # }\n    lst\n  })\n  #get_values_d = shiny::debounce(get_values, 300)\n  \n  \n  shiny::observeEvent(input$nbiv, {\n    nbiv = input$nbiv\n    type = get_type12()#rv$type12\n    if (type == \"bivs\") {\n      shiny::freezeReactiveValue(input, \"mbiv\")\n      shiny::updateSliderInput(session, \"mbiv\", value = nbiv)\n    }\n  })\n  \n  # shiny::observe({\n  # \tn = input$n\n  # \tac = input$auto_range\n  # \ttype = input$type\n  #\n  # \tif (type == \"cat\") return(NULL)\n  # \tif (ac != \"Manual\") {\n  # \t\tshiny::freezeReactiveValue(input, \"range\")\n  # \t\tshinyjs::disable(\"range\")\n  # \t\tif (ac == \"Maximum\") {\n  # \t\t\trng = c(0, 1)\n  # \t\t} else {\n  # \t\t\tfun = paste0(\"default_range_\", type)\n  # \t\t\trng = do.call(fun, list(k = n))\n  # \t\t}\n  # \t\tshinyjs::disable(\"range\")\n  # \t\tshiny::updateSliderInput(session, \"range\", value = c(rng[1], rng[2]))\n  # \t} else {\n  # \t\tshinyjs::enable(\"range\")\n  # \t}\n  # })\n  \n  output$sortcolorUI = shiny::renderUI({\n    #values = get_values()\n    type = get_type12()\n    if (type == \"cat\") {\n      shiny::tagList(\n        shiny::fluidRow(\n          shiny::column(6,\n                        shiny::radioButtons(\"sortcolor\", \"Sort colors\", choices = c(\"Orignal\" = \"orig\", Hue = \"H\", Chroma = \"C\", Luminance = \"L\"), inline = FALSE)),\n          shiny::column(6,\n                        shiny::conditionalPanel(\n                          condition = \"input.sortcolor == 'H'\",\n                          shiny::sliderInput(\"Hstart\", \"Hue start\", min = 0, max = 360, step = 10, value = 0, ticks = FALSE, dragRange = FALSE)\n                        )\n          ))\n        # shiny::radioButtons(\"sortcolor\", \"Sort colors\", choices = c(\"Orignal\" = \"orig\", Hue = \"H\", Chroma = \"C\", Luminance = \"L\"), inline = FALSE),\n        # shiny::conditionalPanel(\n        # \tcondition = \"input.sortcolor == 'H'\",\n        # \tshiny::sliderInput(\"Hstart\", \"Hue start\", min = 0, max = 360, step = 10, value = 0, ticks = FALSE, dragRange = FALSE)\n        # )\n      )\n    } else if (type == \"seq\") {\n      shiny::radioButtons(\"sortcolor\", \"Sorting order\", choices = c(\"Orignal\" = \"orig\", \"Light to dark\" = \"L\"), inline = FALSE)\n    } else if (type == \"div\") {\n      # not working well: (because color sorting is based on whether H[25%] > H[75%] while palette sorting is based on HL, which is a by-product of Hwidth)\n      #shiny::radioButtons(\"sortcolor\", \"Sort colors\", choices = c(\"Orignal\" = \"orig\", Hue = \"H\"), inline = FALSE)\n      NULL\n    } else {\n      NULL\n    }\n  })\n  \n  \n  \n  \n  \n  \n  \n  output$range_info = shiny::renderUI({\n    #if (input$type == \"div\") shiny::div(style=\"text-align:left;\", shiny::tagList(\"middle\", shiny::span(stype = \"float:right;\", \"each side\"))) else \"\"\n    type = get_type12()#rv$type12\n    \n    \n    if (type == \"div\") {\n      shiny::HTML(\"<div style='font-size:70%; color:#111111; text-align:left;'>Middle<span style='float:right;'>Both sides<\/span><\/div>\")\n    } else {\n      shiny::HTML(\"<div style='font-size:70%; color:#111111; text-align:left;'>Left<span style='float:right;'>Right<\/span><\/div>\")\n    }\n  })\n  \n  shiny::observe({\n    values = get_values()\n    pals = values$pal_names\n    n = values$n\n    if (length(pals)) {\n      tab_vals$pals = pals\n      tab_vals$pals_byname = sort(pals)\n      \n      tab_vals$n = n\n      if (!length(tab_vals$pal_name) || !(tab_vals$pal_name %in% pals)) {\n        tab_vals$pal_name = pals[1]\n      }\n      if (substr(values$type, 1, 3) == \"biv\") {\n        cols = as.vector(cols4all:::c4a(tab_vals$pal_name, n = values$nbiv, m = values$mbiv))\n      } else {\n        cols = as.vector(cols4all:::c4a(tab_vals$pal_name, n = n))\n      }\n      \n      na = values$na\n      tab_vals$na = na\n      if (na) cols = c(cols, cols4all:::c4a_na(tab_vals$pal_name))\n      tab_vals$pal = cols\n      tab_vals$palBW = unique(c(cols, \"#FFFFFF\", \"#000000\"))\n      tab_vals$type = values$type\n      tab_vals$idA1 = 1L\n      tab_vals$idA2 = 2L\n      tab_vals$idB1 = 1L\n      tab_vals$idB2 = 2L\n      tab_vals$CR = colorspace::contrast_ratio(cols[1], cols[2])\n      tab_vals$b = cols4all:::approx_blues(cols)\n      tab_vals$r = cols4all:::approx_reds(cols)\n      tab_vals$idC1 = cols[which.max(tab_vals$b)]\n      tab_vals$idC2 = cols[which.max(tab_vals$r)]\n      \n    } else {\n      tab_vals$pal = character(0)\n      tab_vals$na = logical(0)\n      tab_vals$pals = character(0)\n      tab_vals$pal_name = character(0)\n      tab_vals$n = integer(0)\n      tab_vals$palBW = character(0)\n      tab_vals$idA1 = integer(0)\n      tab_vals$idA2 = integer(0)\n      tab_vals$idB1 = integer(0)\n      tab_vals$idB2 = integer(0)\n      tab_vals$CR = numeric(0)\n      tab_vals$idC1 = integer(0)\n      tab_vals$idC2 = integer(0)\n      tab_vals$b = integer(0)\n      tab_vals$r = integer(0)\n      tab_vals$type = character(0)\n    }\n  })\n  \n  shiny::observe({\n    if (length(tab_vals$pal)) {\n      shiny::updateSelectizeInput(session, \"cbfPal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shiny::updateSelectizeInput(session, \"CLPal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shiny::updateSelectizeInput(session, \"namePal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shiny::updateSelectizeInput(session, \"contrastPal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shiny::updateSelectizeInput(session, \"floatPal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shiny::updateSelectizeInput(session, \"APPPal\", choices = tab_vals$pals_byname, selected = tab_vals$pal_name)\n      shinyjs::enable(\"cbfPal\")\n      shinyjs::enable(\"CLPal\")\n      shinyjs::enable(\"namePal\")\n      shinyjs::enable(\"contrastPal\")\n      shinyjs::enable(\"floatPal\")\n      shinyjs::enable(\"APPPal\")\n    } else {\n      shiny::updateSelectizeInput(session, \"cbfPal\", choices = character(0))\n      shiny::updateSelectizeInput(session, \"CLPal\", choices = character(0))\n      shiny::updateSelectizeInput(session, \"namePal\", choices = character(0))\n      shiny::updateSelectizeInput(session, \"contrastPal\", choices = character(0))\n      shiny::updateSelectizeInput(session, \"floatPal\", choices = character(0))\n      shiny::updateSelectizeInput(session, \"APPPal\", choices = character(0))\n      \n      shinyjs::disable(\"cbfPal\")\n      shinyjs::disable(\"CLPal\")\n      shinyjs::disable(\"namePal\")\n      shinyjs::disable(\"contrastPal\")\n      shinyjs::disable(\"floatPal\")\n      shinyjs::disable(\"APPPal\")\n    }\n    \n  })\n  \n  shiny::observeEvent(input$cbfPal, update_reactive(input$cbfPal, 1))\n  shiny::observeEvent(input$CLPal, update_reactive(input$CLPal, 2))\n  shiny::observeEvent(input$namePal, update_reactive(input$namePal, 3))\n  shiny::observeEvent(input$contrastPal, update_reactive(input$contrastPal, 4))\n  shiny::observeEvent(input$floatPal, update_reactive(input$floatPal, 5))\n  shiny::observeEvent(input$APPPal, update_reactive(input$APPPal, 6))\n  \n  update_reactive = function(pal_name, pal_nr) {\n    pal = pal_name\n    if (pal == \"\") {\n      tab_vals$pal = character(0)\n      tab_vals$pal_name = character(0)\n      tab_vals$n = integer(0)\n      tab_vals$palBW = character(0)\n      tab_vals$idA1 = integer(0)\n      tab_vals$idA2 = integer(0)\n      tab_vals$idB1 = integer(0)\n      tab_vals$idB2 = integer(0)\n      tab_vals$CR = numeric(0)\n      tab_vals$idC1 = integer(0)\n      tab_vals$idC2 = integer(0)\n      tab_vals$b = integer(0)\n      tab_vals$b = integer(0)\n      tab_vals$type = character(0)\n      \n    } else {\n      x = cols4all:::c4a_info(pal)\n      \n      if (tab_vals$n > x$nmax || tab_vals$n < x$nmin) return(NULL)\n      \n      cols = as.vector(cols4all:::c4a(x$fullname, n = tab_vals$n))\n      if (tab_vals$na) cols = c(cols, cols4all:::c4a_na(tab_vals$pal_name))\n      \n      colsBW = unique(c(cols, \"#FFFFFF\", \"#000000\"))\n      \n      tab_vals$pal = cols\n      tab_vals$pal_name = pal_name\n      \n      tab_vals$palBW = colsBW\n      \n      tab_vals$b = cols4all:::approx_blues(cols)\n      tab_vals$r = cols4all:::approx_reds(cols)\n      \n      if (pal_nr == 4) {\n        # select maximum floating colors\n        tab_vals$idC1 = which.max(tab_vals$b)\n        tab_vals$idC2 = which.max(tab_vals$r)\n      } else if (pal_nr == 1) {\n        tab_vals$idA1 = 1L\n        tab_vals$idA2 = 2L\n      } else {\n        tab_vals$idB1 = 1L\n        tab_vals$idB2 = 2L\n        tab_vals$CR = colorspace::contrast_ratio(cols[1], cols[2])\n        \n      }\n      \n      tab_vals$type = x$type\n    }\n    if (pal_nr != 1) shiny::updateSelectizeInput(session, \"cbfPal\", choices = tab_vals$pals_byname, selected = pal)\n    if (pal_nr != 2) shiny::updateSelectizeInput(session, \"CLPal\", choices = tab_vals$pals_byname, selected = pal)\n    if (pal_nr != 3) shiny::updateSelectizeInput(session, \"namePal\", choices = tab_vals$pals_byname, selected = pal)\n    if (pal_nr != 4) shiny::updateSelectizeInput(session, \"contrastPal\", choices = tab_vals$pals_byname, selected = pal)\n    if (pal_nr != 5) shiny::updateSelectizeInput(session, \"floatPal\", choices = tab_vals$pals_byname, selected = pal)\n    if (pal_nr != 6) shiny::updateSelectizeInput(session, \"APPPal\", choices = tab_vals$pals_byname, selected = pal)\n    \n  }\n  \n  \n  \n  output$show = function() {\n    values = get_values()#_d()\n    if (is.null(values) || is.null(values$series)) {\n      tab = NULL\n    } else {\n      \n      if (length(.C4A_HASH$vals)) {\n        iden = vapply(.C4A_HASH$vals, function(cv) {\n          identical(cv, values)\n        }, FUN.VALUE = logical(1))\n        if (any(iden)) {\n          return(.C4A_HASH$tables[[which(iden)[1]]])\n        }\n      }\n      \n      \n      \n      # Create a Progress object\n      progress <- shiny::Progress$new()\n      # Make sure it closes when we exit this reactive, even if there's an error\n      on.exit(progress$close())\n      \n      progress$set(message = \"Colors in progress...\", value = 0)\n      \n      \n      tab = if (is.null(values$prep)) NULL\n      else cols4all:::plot_table(p = values$prep, text.format = values$format, text.col = values$textcol, include.na = values$na, cvd.sim = values$cvd, verbose = FALSE)\n    }\n    if (is.null(tab)) {\n      kableExtra::kbl(data.frame(\"No palettes found. Please change the selection.\"), col.names = \" \")\n    } else {\n      .C4A_HASH$vals = c(.C4A_HASH$vals, list(values))\n      #str(.C4A_HASH$vals)\n      .C4A_HASH$tables = c(.C4A_HASH$tables, tab)\n      tab\n    }\n  }\n  \n  #############################\n  ## CBF tab\n  #############################\n  \n  output$cbfSimu = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_cvd(pal, dark = input$dark, include.na = tab_vals$na)\n  })\n  \n  output$cbfHL = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_confusion_lines(pal, cvd = \"none\", dark = input$dark)\n  })\n  \n  output$cbfCL1 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_confusion_lines(pal, cvd = \"deutan\", dark = input$dark)\n  })\n  \n  output$cbfCL2 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_confusion_lines(pal, cvd = \"protan\", dark = input$dark)\n  })\n  \n  output$cbfCL3 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_confusion_lines(pal, cvd = \"tritan\", dark = input$dark)\n  })\n  \n  output$cbfSimi = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    id1 = tab_vals$idA1\n    id2 = tab_vals$idA2\n    \n    cols4all:::c4a_plot_dist_matrix(pal, cvd = \"none\", id1 = id1, id2 = id2, dark = input$dark, advanced = (input$cbfScore == \"Gradient\"), bc_adj = input$cbfBcAdj)\n  })\n  \n  output$cbfPSimi1 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    id1 = tab_vals$idA1\n    id2 = tab_vals$idA2\n    \n    cols4all:::c4a_plot_dist_matrix(pal, cvd = \"deutan\", id1 = id1, id2 = id2, dark = input$dark, advanced = (input$cbfScore == \"Gradient\"), bc_adj = input$cbfBcAdj)\n  })\n  \n  output$cbfPSimi2 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    id1 = tab_vals$idA1\n    id2 = tab_vals$idA2\n    \n    cols4all:::c4a_plot_dist_matrix(pal, cvd = \"protan\", id1 = id1, id2 = id2, dark = input$dark, advanced = (input$cbfScore == \"Gradient\"), bc_adj = input$cbfBcAdj)\n  })\n  \n  output$cbfPSimi3 = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    pal = tab_vals$pal\n    id1 = tab_vals$idA1\n    id2 = tab_vals$idA2\n    \n    cols4all:::c4a_plot_dist_matrix(pal, cvd = \"tritan\", id1 = id1, id2 = id2, dark = input$dark, advanced = (input$cbfScore == \"Gradient\"), bc_adj = input$cbfBcAdj)\n  })\n  \n  cbf_map = function(cols, cvd) {\n    if (!length(cols)) return(NULL)\n    \n    hcl = cols4all:::get_hcl_matrix(cols)\n    \n    cols_cvd = cols4all:::sim_cvd(cols, cvd)\n    \n    borders = ifelse(mean(hcl[,3]>=50), \"#000000\", \"#FFFFFF\")\n    \n    cols4all:::c4a_plot_map(col1 = cols_cvd[1], col2 = cols_cvd[2], borders = borders, lwd = 1, crop = TRUE, dark = input$dark)\n  }\n  \n  cbf_lines = function(cols, cvd) {\n    if (!length(cols)) return(NULL)\n    \n    hcl = cols4all:::get_hcl_matrix(cols)\n    \n    cols_cvd = cols4all:::sim_cvd(cols, cvd)\n    cols4all:::c4a_plot_lines(cols = c(cols_cvd[1], col2 = cols_cvd[2]), lwd = 3, asp = .9, dark = input$dark)\n  }\n  \n  \n  \n  output$cbf_ex1 = shiny::renderPlot({\n    if (!length(tab_vals$idA1)) return(NULL)\n    fun = paste0(\"cbf_\", tolower(input$cbfType))\n    do.call(fun, list(cols = tab_vals$pal[c(tab_vals$idA1, tab_vals$idA2)], cvd = \"none\"))\n  })\n  output$cbf_ex2 = shiny::renderPlot({\n    if (!length(tab_vals$idA1)) return(NULL)\n    fun = paste0(\"cbf_\", tolower(input$cbfType))\n    do.call(fun, list(cols = tab_vals$pal[c(tab_vals$idA1, tab_vals$idA2)], cvd = \"deutan\"))\n  })\n  output$cbf_ex3 = shiny::renderPlot({\n    if (!length(tab_vals$idA1)) return(NULL)\n    fun = paste0(\"cbf_\", tolower(input$cbfType))\n    do.call(fun, list(cols = tab_vals$pal[c(tab_vals$idA1, tab_vals$idA2)], cvd = \"protan\"))\n  })\n  output$cbf_ex4 = shiny::renderPlot({\n    if (!length(tab_vals$idA1)) return(NULL)\n    fun = paste0(\"cbf_\", tolower(input$cbfType))\n    do.call(fun, list(cols = tab_vals$pal[c(tab_vals$idA1, tab_vals$idA2)], cvd = \"tritan\"))\n  })\n  \n  get_click_id = function(pal, x, y) {\n    n = length(pal)\n    \n    brks_x = seq(0.04, 0.76, length.out = n + 2)\n    brks_y = seq(0, 1, length.out = n + 2)\n    \n    x_id = as.integer(cut(x, breaks = brks_x)) - 1\n    y_id = n + 1 - as.integer(cut(y, breaks = brks_y))\n    \n    if (!is.na(x_id) && (x_id < 1 || x_id > n)) x_id = NA\n    if (!is.na(y_id) && (y_id < 1 || y_id > n)) y_id = NA\n    \n    list(x = x_id, y = y_id)\n  }\n  \n  shiny::observeEvent(input$cbfSimi_click, {\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    ids = get_click_id(pal, input$cbfSimi_click$x, input$cbfSimi_click$y)\n    \n    if (!is.na(ids$x)) tab_vals$idA2 = ids$x\n    if (!is.na(ids$y)) tab_vals$idA1 = ids$y\n  })\n  \n  shiny::observeEvent(input$cbfPSimi1_click, {\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    ids = get_click_id(pal, input$cbfPSimi1_click$x, input$cbfPSimi1_click$y)\n    \n    if (!is.na(ids$x)) tab_vals$idA2 = ids$x\n    if (!is.na(ids$y)) tab_vals$idA1 = ids$y\n    \n  })\n  \n  shiny::observeEvent(input$cbfPSimi2_click, {\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    ids = get_click_id(pal, input$cbfPSimi2_click$x, input$cbfPSimi2_click$y)\n    \n    if (!is.na(ids$x)) tab_vals$idA2 = ids$x\n    if (!is.na(ids$y)) tab_vals$idA1 = ids$y\n  })\n  \n  shiny::observeEvent(input$cbfPSimi3_click, {\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    ids = get_click_id(pal, input$cbfPSimi3_click$x, input$cbfPSimi3_click$y)\n    \n    if (!is.na(ids$x)) tab_vals$idA2 = ids$x\n    if (!is.na(ids$y)) tab_vals$idA1 = ids$y\n  })\n  \n  \n  shiny::observeEvent(input$table_click, {\n    pal = tab_vals$palBW\n    if (!length(pal)) return(NULL)\n    \n    ids = get_click_id(pal, input$table_click$x, input$table_click$y)\n    \n    if (!is.na(ids$x)) tab_vals$idB2 = ids$x\n    if (!is.na(ids$y)) tab_vals$idB1 = ids$y\n    \n    if (!is.na(ids$x) || !is.na(ids$y)) tab_vals$CR = colorspace::contrast_ratio(tab_vals$idB1, tab_vals$idB2)\n  })\n  \n  \n  \n  #############################\n  ## HCL analysis tab\n  #############################\n  \n  output$hclspace = plotly::renderPlotly({\n    \n    Hr = input$rangeH\n    Cr = input$rangeC\n    Lr = input$rangeL\n    \n    \n    pal = if (input$hclspacepal) {\n      tab_vals$pal\n    } else NULL\n    cols4all:::c4a_plot_hcl_space(Hmin = Hr[1], Hmax = Hr[2],\n                       Cmin = Cr[1], Cmax = Cr[2],\n                       Lmin = Lr[1], Lmax = Lr[2],\n                       colors = pal)\n  })\n  \n  \n  output$anaHUE = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    \n    # width = switch(tab_vals$type,\n    # \t\t\t   seq = \"total\",\n    # \t\t\t   div = \"halves\",\n    # \t\t\t   \"total\")\n    width = \"none\"\n    \n    pal = tab_vals$pal\n    cols4all:::c4a_plot_hues(pal, dark = input$dark, width = width)\n  })\n  # output$anaRGB1 = shiny::renderPlot({\n  # \tif (!length(tab_vals$pal)) return(NULL)\n  #\n  # \tpal = tab_vals$pal\n  # \tcols4all:::c4a_plot_rgb_space(pal, cvd = \"none\", dark = input$dark, L = paste0(\"L\", input$rgbL))\n  # })\n  \n  output$anaCL = shiny::renderPlot({\n    pal = tab_vals$pal\n    \n    if (!length(pal)) return(NULL)\n    \n    type = tab_vals$type\n    \n    cols4all:::c4a_plot_CL(pal, Lrange = (type == type), dark = input$dark)\n  })\n  \n  output$anaFair = shiny::renderPlot({\n    pal = tab_vals$pal\n    \n    if (!length(pal)) return(NULL)\n    \n    type = tab_vals$type\n    \n    cols4all:::c4a_plot_fair(pal, dark = input$dark, type = if (type == \"cat\") \"LC\" else \"C\")\n  })\n  \n  \n  \n  #############################\n  ## Contrast tab\n  #############################\n  \n  output$cr_title = shiny::renderUI({\n    shiny::markdown(paste0(\"#### Contrast ratios with \", ifelse(input$dark, \"black\", \"white\"), \" (background)\"))\n  })\n  \n  output$ex_plus = shiny::renderPlot({\n    borders = input$borders\n    lwd = input$lwd\n    \n    if (input$plus_rev_original) {\n      cols4all:::c4a_plot_Plus_Reversed(orientation = \"landscape\", borders = borders, lwd = lwd)\n    } else {\n      pal = tab_vals$palBW\n      \n      col1 = pal[tab_vals$idB1]\n      if (!length(col1)) return(NULL)\n      col2 = pal[tab_vals$idB2]\n      \n      cols4all:::c4a_plot_Plus_Reversed(col1, col2, orientation = \"landscape\", borders = borders, lwd = lwd)\n      \n    }\n  })\n  \n  output$ex = shiny::renderPlot({\n    pal = tab_vals$palBW\n    \n    col1 = pal[tab_vals$idB1]\n    if (!length(col1)) return(NULL)\n    col2 = pal[tab_vals$idB2]\n    \n    borders = input$borders\n    lwd = input$lwd\n    if (input$chart == \"Barchart\") {\n      cols4all:::c4a_plot_bars(col1 = col1, col2 = col2, borders = borders, lwd = lwd, dark = input$dark)\n    } else {\n      cols4all:::c4a_plot_map(col1 = col1, col2 = col2, borders = borders, lwd = lwd, dark = input$dark)\n    }\n  })\n  \n  output$table = shiny::renderPlot({\n    \n    id1 = tab_vals$idB1\n    id2 = tab_vals$idB2\n    pal = tab_vals$palBW\n    \n    cols4all:::c4a_plot_CR_matrix(pal, id1 = id1, id2 = id2, dark = input$dark)\n  })\n  \n  output$cr_plot = shiny::renderPlot({\n    pal = tab_vals$pal\n    opts = input$cr_plot_opts\n    cols4all:::c4a_plot_CR(pal, dark = input$dark, sort =  (\"sort\" %in% opts), lines_WCAG = (\"wcag\" %in% opts), lines_equiluminance = (\"equi\" %in% opts))\n  })\n  \n  \n  \n  \n  output$textCR = shiny::renderUI({\n    cr = tab_vals$CR\n    if (!length(cr)) return(NULL)\n    \n    txt = if (cr >= 7) {\n      \"safe to print text according to [WCAG 2.2](https://www.w3.org/TR/WCAG22/) level **AAA**\"\n    } else if (cr >= 4.5) {\n      \"safe to print text according to the [WCAG 2.2](https://www.w3.org/TR/WCAG22/) level **AA**\"\n    } else if (cr >= 3) {\n      \"safe to print text according to the [WCAG 2.2](https://www.w3.org/TR/WCAG22/) level **A**\"\n    } else {\n      \"not safe to print text according to the [WCAG 2.2](https://www.w3.org/TR/WCAG22/)\"\n    }\n    \n    shiny::markdown(paste0(\"**Contrast ratio** (\", sprintf(\"%.2f\", round(cr, 1)), \"): \", txt))\n  })\n  \n  output$bordersCR = shiny::renderUI({\n    cr = tab_vals$CR\n    if (!length(cr)) return(NULL)\n    \n    txt = if (cr <= 1.2) {\n      \"strongly recommended to use border lines when plotting these colors next to each other\"\n    } else if (cr <= 1.5) {\n      \"recommended to use border lines when plotting these colors next to each other\"\n    } else if (cr <= 2) {\n      \"consider to use border lines when plotting these colors next to each other\"\n    } else {\n      \"colors can be plot next to each other without border lines\"\n    }\n    shiny::markdown(paste0(\"**Contrast ratio** (\", sprintf(\"%.2f\", round(cr, 1)), \"): \", txt))\n  })\n  \n  output$textPlot = shiny::renderPlot({\n    pal = tab_vals$palBW\n    col1 = pal[tab_vals$idB1]\n    if (!length(col1)) return(NULL)\n    col2 = pal[tab_vals$idB2]\n    \n    cols4all:::c4a_plot_text2(c(col1, col2), dark = input$dark)\n  })\n  \n  \n  \n  #############################\n  ## Naming tab\n  #############################\n  \n  # shiny::observeEvent(input$w_do, {\n  # \tshinyjs::runjs(\"$('#container').prop('disabled', true);\")\n  #\n  # \tw = cols4all:::c4a_options(\"boynton_weights\")[[1]]\n  # \tw[1:11] = vapply(1:11, function(i) {\n  # \t\tinput[[paste0(\"w_\", i)]]\n  # \t}, FUN.VALUE = numeric(1))\n  # \tcols4all:::c4a_options(boynton_weights = w)\n  # \tupdatePlot(w)\n  # \tget_trigger(!get_trigger()) # to update table\n  # \tshinyjs::runjs(\"$('#container').prop('disabled', false);\")\n  #\n  # })\n  \n  output$anaName = shiny::renderPlot({\n    pal = tab_vals$pal\n    cols4all:::c4a_plot_names(pal, dark = input$dark, a = input$nameAlpha)\n  })\n  \n  updatePlot <- function(result) {\n    output$anaName = shiny::renderPlot({\n      pal = tab_vals$pal\n      cols4all:::c4a_plot_names(pal, dark = input$dark, a = input$nameAlpha)\n    })\n  }\n  \n  \n  ##############################\n  ## Floating tab\n  ##############################\n  \n  \n  \n  output$float_letters = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    cols4all:::c4a_plot_text(pal, dark = input$dark, size = 1.25, frame = TRUE)\n  })\n  \n  \n  output$float_selection = shiny::renderUI({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    b = tab_vals$b\n    r = tab_vals$r\n    \n    ids = c(which.max(b)[1], which.max(r)[1])\n    \n    #br = get_blue_red()\n    \n    if (max(b) > .C4A$Blues && max(r) > 100) {\n      btext = paste0(\"This illusion will likely occur with blue color \", c(LETTERS, letters)[ids[1]], \" and a red color (e.g. \", c(LETTERS, letters)[ids[2]], \"), at least with a dark background\")\n    } else if (max(b) > 100 && max(r) > 100) {\n      btext = paste0(\"This illusion could occur with blue color \", c(LETTERS, letters)[ids[1]], \" and a red color (e.g. \", c(LETTERS, letters)[ids[2]], \"), at least with a dark background\")\n    } else if (max(b) > 100 && max(r) <= 100) {\n      btext = paste0(\"This illusion will probably not occur, because the palette does not contain a red(dish) color\")\n    } else {\n      btext = paste0(\"This illusion will probably not occur, because the palette does not contain any blue color\")\n    }\n    \n    shiny::tagList(\n      shiny::markdown(paste(btext)),\n      shiny::selectizeInput(\"float_col1\", \"Color 1\", choices = c(LETTERS, letters)[1:length(pal)], selected = c(LETTERS, letters)[ids[1]]),\n      shiny::selectizeInput(\"float_col2\", \"Color 2\", choices = c(LETTERS, letters)[1:length(pal)], selected = c(LETTERS, letters)[ids[2]])\n    )\n  })\n  \n  shiny::observeEvent(input$float_col1, {\n    tab_vals$idC1 = tab_vals$pal[which(c(LETTERS, letters) == input$float_col1)]\n  })\n  \n  shiny::observeEvent(input$float_col2, {\n    tab_vals$idC2 = tab_vals$pal[which(c(LETTERS, letters) == input$float_col2)]\n  })\n  \n  output$float_letters_AB = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    \n    cols = c(tab_vals$idC1, tab_vals$idC2)\n    \n    \n    lL = c(LETTERS,letters)[c(which(pal == cols[1]),\n                              which(pal == cols[2]))]\n    if (length(lL) == 2) {\n      cols4all:::c4a_plot_text(cols, words = lL, dark = input$dark, size = 1.25, frame = TRUE)\n    }\n  })\n  \n  output$blues = shiny::renderPlot({\n    if (!length(tab_vals$pal)) return(NULL)\n    if (!input$float_original) {\n      pal = tab_vals$pal\n      \n      \n      cols = c(tab_vals$idC1, tab_vals$idC2)\n      \n      if (input$float_rev) cols = rev(cols)\n      cols4all:::c4a_plot_floating_rings(col1 = cols[2], col2 = cols[1], dark = input$dark)\n    } else {\n      cols = c(\"#FF0000\", \"#0000FF\")\n      if (input$float_rev) cols = rev(cols)\n      cols4all:::c4a_plot_floating_rings(cols[1], cols[2])\n    }\n  })\n  \n  \n  \n  \n  ##############################\n  ## Application tab\n  ##############################\n  \n  output$MAPplot = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    pal2 = cols4all:::sim_cvd(pal, input$APPcvd)\n    \n    cols4all:::c4a_plot_map(pal2, borders = input$MAPborders, lwd = input$MAPlwd, include.na = tab_vals$na, dark = input$dark, dist = input$MAPdist)\n  })\n  \n  output$DOTplot = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    pal2 = cols4all:::sim_cvd(pal, input$APPcvd)\n    \n    cols4all:::c4a_plot_scatter(pal2,  borders = input$DOTborders, lwd = input$DOTlwd, size = input$DOTsize, dark = input$dark, dist = input$DOTdist)\n  })\n  \n  output$TXTplot1 = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    pal2 = cols4all:::sim_cvd(pal, input$APPcvd)\n    \n    cols4all:::c4a_plot_text(pal2, dark = input$dark, size = input$TXTfsize, face = input$TXTfface)\n  })\n  \n  output$TXTplot2 = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    pal2 = cols4all:::sim_cvd(pal, input$APPcvd)\n    cols4all:::c4a_plot_text(pal2, dark = input$dark, size = input$TXTfsize, face = input$TXTfface, frame = TRUE)\n  })\n  \n  output$LINEplot = shiny::renderPlot({\n    pal = tab_vals$pal\n    if (!length(pal)) return(NULL)\n    pal2 = cols4all:::sim_cvd(pal, input$APPcvd)\n    \n    cols4all:::c4a_plot_lines(pal2, dark = input$dark, lwd = input$LINElwd, stacked = input$LINEstack)\n  })\n  \n  \n  ##############################\n  ## Application tab\n  ##############################\n  \n  \n  #observeEvent(input$infoHueLines, infoBoxDialog(\"Hue Lines\", \"markdown/infoHueLines.md\"))\n  \n  oE = function(i, a, id, gif) {\n    shiny::observeEvent(input[[i]], {\n      anno[[a]] = !anno[[a]]\n      if (anno[[a]]) {\n        \n        for (j in 1:length(id)) {\n          if (length(id) == 1) {\n            d = id[1]\n          } else {\n            d = id[j]\n          }\n          if (length(gif) == 1) {\n            g = gif[1]\n          } else {\n            g = gif[j]\n          }\n          gs = paste(paste0(\"imgResources/\", g, 1:2,\"x.gif \", 1:2, \"x\"), collapse = \", \")\n          g1 = paste0(\"imgResources/\", g, \"x1.gif\")\n          shinyjs::removeClass(id = d, class = \"hide\")\n          shinyjs::runjs(paste0(\"\n\t\t\t\t\t\t\tvar logo = document.getElementById('\", d, \"');\n\t\t\t\t\t\t\tlogo.src = '\", g1, \"';\n\t\t\t\t\t\t\tlogo.srcset = '\", gs, \"';\n\t\t\t\t\t\t\"))\n        }\n        \n        shiny::updateActionButton(session, i, icon = ani_off)\n      } else {\n        for (d in id) {\n          shinyjs::addClass(id = d, class = \"hide\")\n          shinyjs::runjs(paste0(\"\n\t\t\t\t\t\tvar logo = document.getElementById('\", d, \"');\n\t\t\t\t\t\tlogo.src = '';\n\t\t\t\t\t\tlogo.srcset = '';\n\t\t\t\t\t\"))\n        }\n        shinyjs::addClass(id = id, class = \"hide\")\n        shiny::updateActionButton(session, i, icon = ani_on)\n      }\n      \n    })\n  }\n  \n  oE(\"infoHueLines\", \"hue_lines\", \"aniHL\", \"hue_lines\")\n  oE(\"infoConf\", \"conf_lines\", c(\"aniCL1\", \"aniCL2\", \"aniCL3\"), c(\"conf_linesD\", \"conf_linesP\", \"conf_linesT\"))\n  oE(\"infoSimi\", \"simi\", \"aniSimi\", \"simi\")\n  oE(\"infoPSimi\", \"psimi\", c(\"aniPSimi1\", \"aniPSimi2\", \"aniPSimi3\"), c(\"simiD\", \"simiP\", \"simiT\"))\n  oE(\"infoSimu\", \"simu\", \"aniSimu\", \"simu\")\n  oE(\"infoHUE\", \"hue_neck\", \"aniHUE\", \"hue_neck\")\n  oE(\"infoCL\", \"cl_plot\", \"aniCL\", \"cl_plot\")\n  oE(\"infoFair\", \"fair_plot\", \"aniFair\", \"fair_plot\")\n  oE(\"infoName\", \"naming\", \"aniName\", \"naming\")\n  \n  oE(\"infoCR\", \"cr\", \"aniTable\", \"table\")\n  oE(\"infoBlues\", \"blues\", \"aniBlues\", \"blues\")\n  \n}\nshiny::shinyApp(ui = ui, server = server)","type":"text"}]
